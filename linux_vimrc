" =============================================================================
"        << 判断操作系统是 Windows 还是 Linux 和判断是终端还是 Gvim >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" -----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif
" -----------------------------------------------------------------------------
"  < Gvim/Vim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
set hlsearch        "高亮搜索
set incsearch       "在输入要搜索的文字时，实时匹配

syntax on
syntax enable

set mouse=a                    " 在任何模式下启用鼠标
set t_Co=256                   " 在终端启用256色
set backspace=2                " 设置退格键可用

set writebackup                             "保存文件前建立备份，保存成功后删除该备份
set nobackup                                "设置无备份文件
" set noswapfile                              "设置无临时文件
" set vb t_vb=                                "关闭提示音

" -----------------------------------------------------------------------------
"  < 编码配置 >
" -----------------------------------------------------------------------------
" 注：使用utf-8格式后，软件与程序源码、文件路径不能有中文，否则报错
set encoding=utf-8                                    "设置gvim内部编码
set fileencoding=utf-8                                "设置当前文件编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1     "设置支持打开的文件的编码

" 文件格式，默认 ffs=dos,unix
set fileformat=unix                                   "设置新文件的<EOL>格式
set fileformats=unix,dos,mac                          "给出文件的<EOL>格式类型

" -----------------------------------------------------------------------------
"  < 编写文件时的配置 >
" -----------------------------------------------------------------------------
filetype on                                           "启用文件类型侦测
filetype plugin on                                    "针对不同的文件类型加载对应的插件
filetype plugin indent on                             "启用缩进
set smartindent                                       "启用智能对齐方式
set expandtab                                         "将Tab键转换为空格
set tabstop=4                                         "设置Tab键的宽度
set shiftwidth=4                                      "换行时自动缩进4个空格
set smarttab                                          "指定按一次backspace就删除shiftwidth宽度的空格
"set foldenable                                        "启用折叠
"set foldmethod=indent                                 "indent 折叠方式
"set foldmethod=marker                                "marker 折叠方式

" 用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 当文件在外部被修改，自动更新该文件
set autoread

" 常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<CR>:noh<CR>

set ignorecase                                        "搜索模式里忽略大小写
set smartcase                                         "如果搜索模式包含大写字符，不使用 'ignorecase' 选项，只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用
" set noincsearch                                       "在输入要搜索的文字时，取消实时匹配

" Ctrl + K 插入模式下光标向上移动
imap <c-k> <Up>

" Ctrl + J 插入模式下光标向下移动
imap <c-j> <Down>

" Ctrl + H 插入模式下光标向左移动
imap <c-h> <Left>

" Ctrl + L 插入模式下光标向右移动
imap <c-l> <Right>

" 启用每行超过80列的字符提示（字体变蓝并加下划线），不启用就注释掉
"au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 80 . 'v.\+', -1)

" -----------------------------------------------------------------------------
"  < 界面配置 >
" -----------------------------------------------------------------------------
set number                                            "显示行号
set laststatus=2                                      "启用状态栏信息
set cmdheight=2                                       "设置命令行的高度为2，默认为1
set cursorline                                        "突出显示当前行
"set guifont=YaHei_Consolas_Hybrid:h10                 "设置字体:字号（字体名称空格用下划线代替）
set anti enc=utf-8
set guifont=Courier_New:h13:cANSI


"set nowrap                                            "设置不自动换行
set shortmess=atI                                     "去掉欢迎界面
" set ruler                   " 打开状态栏标尺

colorscheme Tomorrow-Night-Eighties               "终端配色方案



" reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" =============================================================================
"                          << 以下为常用插件配置 >>
" =============================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" -----------------------------------------------------------------------------
"  < a.vim 插件配置 >
" -----------------------------------------------------------------------------
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口
Plugin 'a.vim'

" -----------------------------------------------------------------------------
"  < Align 插件配置 >
" -----------------------------------------------------------------------------
" 一个对齐的插件，用来——排版与对齐代码，功能强大，不过用到的机会不多
Plugin 'Align'

" -----------------------------------------------------------------------------
"  < auto-pairs 插件配置 >
" -----------------------------------------------------------------------------
" 用于括号与引号自动补全，不过会与函数原型提示插件echofunc冲突
" 所以我就没有加入echofunc插件
Plugin 'auto-pairs'
" 
" -----------------------------------------------------------------------------
"  < BufExplorer 插件配置 >
" -----------------------------------------------------------------------------
" 快速轻松的在缓存中切换（相当于另一种多个文件间的切换方式）
" <Leader>be 在当前窗口显示缓存列表并打开选定文件
" <Leader>bs 水平分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
" <Leader>bv 垂直分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
Plugin 'vim-scripts/bufexplorer.zip'

" -----------------------------------------------------------------------------
"  < cSyntaxAfter 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'cSyntaxAfter'

" 高亮括号与运算符等
au! BufRead,BufNewFile,BufEnter *.{c,cpp,h,java,javascript} call CSyntaxAfter()


" -----------------------------------------------------------------------------
"  < minibufexpl 插件配置 >
" -----------------------------------------------------------------------------
"Plugin 'minibufexpl.vim'         

" " 快速浏览和操作Buffer
" " 主要用于同时打开多个文件并相与切换

" let g:miniBufExplMapWindowNavArrows = 1     "用Ctrl加方向键切换到上下左右的窗口中去
" let g:miniBufExplMapWindowNavVim = 1        "用<C-k,j,h,l>切换到上下左右的窗口中去
" let g:miniBufExplMapCTabSwitchBufs = 1      "功能增强（不过好像只有在Windows中才有用）
" "                                            <C-Tab> 向前循环切换到每个buffer上,并在但前窗口打开
" "                                            <C-S-Tab> 向后循环切换到每个buffer上,并在当前窗口打开

" 在不使用 MiniBufExplorer 插件时也可用<C-k,j,h,l>切换到上下左右的窗口中去
let g:miniBufExplModSelTarget = 1 

noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l

" -----------------------------------------------------------------------------
"  < neocomplcache 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'Shougo/neocomplcache.vim'
" 关键字补全、文件路径补全、tag补全等等，各种，非常好用，速度超快。
let g:neocomplcache_enable_at_startup = 1     "vim 启动时启用插件
" let g:neocomplcache_disable_auto_complete = 1 "不自动弹出补全列表
" 在弹出补全列表后用 <c-p> 或 <c-n> 进行上下选择效果比较好
" smartcase
let g:neocomplcache#enable_smart_case = 1

" -----------------------------------------------------------------------------
"  < nerdcommenter 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'scrooloose/nerdcommenter'
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let NERDSpaceDelims = 1                     "在左注释符之后，右注释符之前留有空格

" -----------------------------------------------------------------------------
"  < nerdtree 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'scrooloose/nerdtree'
" 有目录村结构的文件浏览插件

" 常规模式下输入 F2 调用插件
nmap <F2> :NERDTreeToggle<CR>

" -----------------------------------------------------------------------------
"  < omnicppcomplete 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'OmniCppComplete'
" 用于C/C++代码补全，这种补全主要针对命名空间、类、结构、共同体等进行补全，详细
" 说明可以参考帮助或网络教程等
" 使用前先执行如下 ctags 命令（本配置中可以直接使用 ccvext 插件来执行以下命令）
" ctags -R --c++-kinds=+p --fields=+iaS --extra=+q
" 我使用上面的参数生成标签后，对函数使用跳转时会出现多个选择
" 所以我就将--c++-kinds=+p参数给去掉了，如果大侠有什么其它解决方法希望不要保留呀
set completeopt=menu                        "关闭预览窗口

" -----------------------------------------------------------------------------
"  < airline 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

set laststatus=2    "show the status line"
""""""""""""""""""""""""""""""
let g:airline_theme='luna'
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 1

" let g:airline#extensions#branch#enabled = 1

let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#vcs_priority = ["git"]
" enable/disable detection of whitespace errors. >
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" enable/disable enhanced tabline. (c)
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#buffer_idx_mode = 1

"设置切换Buffer快捷键"
nnoremap <C-N> :bn<CR>
nnoremap <C-P> :bp<CR>
""
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
" nmap <leader>- <Plug>AirlineSelectPrevTab
" nmap <leader>+ <Plug>AirlineSelectNextTab

" fix exit insert mode delay
set ttimeoutlen=50

" -----------------------------------------------------------------------------
"  < repeat 插件配置 >
" -----------------------------------------------------------------------------
" 主要用"."命令来重复上次插件使用的命令
Plugin 'repeat.vim'

" -----------------------------------------------------------------------------
"  < surround 插件配置 >
" -----------------------------------------------------------------------------
" 快速给单词/句子两边增加符号（包括html标签），缺点是不能用"."来重复命令
" 不过 repeat 插件可以解决这个问题，详细帮助见 :h surround.txt
Plugin 'tpope/vim-surround'

" -----------------------------------------------------------------------------
"  < Syntastic 插件配置 >
" -----------------------------------------------------------------------------
" 用于保存文件时查检语法
Plugin 'syntastic'

" -----------------------------------------------------------------------------
"  < snipMate 插件配置 >
" -----------------------------------------------------------------------------
" 用于各种代码补全，这种补全是一种对代码中的词与代码块的缩写补全，详细用法可以参
" 考使用说明或网络教程等。不过有时候也会与 supertab 插件在补全时产生冲突，如果大
" 侠有什么其它解决方法希望不要保留呀
Plugin 'msanders/snipmate.vim'

" -----------------------------------------------------------------------------
"  < TagList 插件配置 >
" -----------------------------------------------------------------------------
Plugin 'taglist.vim'

" 高效地浏览源码, 其功能就像vc中的workpace
" 那里面列出了当前文件中的所有宏,全局变量, 函数名等

" 常规模式下输入 tl 调用插件，如果有打开 Tagbar 窗口则先将其关闭
nmap tl :TagbarClose<CR>:Tlist<CR>

let Tlist_Show_One_File=1                   "只显示当前文件的tags
" let Tlist_Enable_Fold_Column=0              "使taglist插件不显示左边的折叠行
let Tlist_Exit_OnlyWindow=1                 "如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_File_Fold_Auto_Close=1            "自动折叠
let Tlist_WinWidth=50                       "设置窗口宽度
let Tlist_Use_Right_Window=1                "在右侧窗口中显示


" -----------------------------------------------------------------------------
"  < ZoomWin 插件配置 >
" -----------------------------------------------------------------------------
" 用于分割窗口的最大化与还原
" 常规模式下按快捷键 <c-w>o 在最大化与还原间切换
Plugin 'ZoomWin'

" -----------------------------------------------------------------------------
"  < lookfile 工具配置 >
" -----------------------------------------------------------------------------
Plugin 'lookupfile'
let g:LookupFile_MinPatLength = 2               "最少输入2个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0        "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1     "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1          "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0              "不允许创建不存在的文件
let g:LookupFile_DisableDefaultMap=1
if filereadable("filenametags")                "设置tag文件的名字
	let g:LookupFile_TagExpr = '"./filenametags"'
endif
nmap <c-f> :LUTags<CR>

Plugin 'genutils'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" -----------------------------------------------------------------------------
"  < cscope 工具配置 >
" -----------------------------------------------------------------------------
" 用Cscope自己的话说 - "你可以把它当做是超过频的ctags"
if has("cscope")
	"设定可以使用 quickfix 窗口来查看 cscope 结果
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	"使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳转
	set cscopetag
	"如果你想反向搜索顺序设置为1
	set csto=0
	"在当前目录中添加任何数据库
	if filereadable("cscope.out")
        cs kill -1
		cs add cscope.out
	"否则添加数据库环境中所指出的
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set cscopeverbose
	"快捷键设置
	"Find this C symbol
	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap ;s :cs find s 
	"Find this definition
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap ;g :cs find g 
	"Find functions calling this function
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap ;c :cs find c 
	"Find this text string	
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap ;t :cs find t 
	"Find this egrep pattern
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap ;e :cs find e 
	"Find this file
	nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap ;f :cs find f 
	"Find files #including this file
	nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap ;i :cs find i 
	"Find functions called by this function	
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	
    nmap ;d :cs find d 
endif


" -----------------------------------------------------------------------------
"  < ctags 工具配置 >
" -----------------------------------------------------------------------------
" 对浏览代码非常的方便,可以在函数,变量之间跳转等
set tags=./tags;                            "向上级目录递归查找tags文件（好像只有在Windows下才有用）




" =============================================================================
"                          << 其它 >>
" =============================================================================

" 注：上面配置中的"<Leader>"在本软件中设置为"\"键（引号里的反斜杠），如<Leader>t
" 指在常规模式下按"\"键加"t"键，这里不是同时按，而是先按"\"键后按"t"键，间隔在一
" 秒内，而<Leader>cs是先按"\"键再按"c"又再按"s"键

" function Remove_shell()
	" !del shell
" endfunction

" if filereadable("SHELL")
	" let g:Env_shell = 1
	" :silent call Remove_shell()
" else
	" let g:Env_shell = 0
" endif

function! SyncAllTags()
	cs kill -1
    if g:islinux
		!bash sync.sh
    endif
    if g:iswindows
		!sync.bat
    endif
	cs add cscope.out
	set tags=./tags;                            "向上级目录递归查找tags文件（好像只有在Windows下才有用）
	let g:LookupFile_TagExpr = '"./filenametags"'
endfunction

if g:islinux
command! Sync :call SyncAllTags()
endif

if g:iswindows
command! Sync :silent call SyncAllTags()
endif

"set errorformat=%f:%l:%c:\ error:\ %m,%f:(%.%#):\ %m
"set errorformat=%f:%l:%c:\ fatal\ error:\ %m
" set errorformat+=%f:%l:%c:\ fatal\ error:\ %m,%f:(%.%#):\ %m
"set errorformat+=%f:%l:%c:\ warning:\ %m
" set errorformat+=%Dmake[%*\\d]:\ Entering\ directory\ `%f',%Dmake[%*\\d]:\ Leaving\ directory\ `%f',
" set errorformat+=CC\ %f
" set errorformat+=%DCCDIR\ %f
" set errorformat+=make[%*\\d]:\ ***\ [%f]\ Error\ %n,
"set errorformat+=%f:\ undefined\ reference\ to\ %m
" set errorformat+=%f:%l:\ undefined\ reference\ to\ %m
" set errorformat+=make:\ %m

vmap ;l		:s/\\/\//g<CR>
vmap ;a     :s/$/ \\/g<CR>
vmap ;o     :s/\.c/\.o/g<CR>

noremap \td O/*-TODO-*/<Esc> 
inoremap if<CR> if (){<CR>}<Esc>kf(a
inoremap else<CR> else {<CR>}<Esc>O
inoremap ifelse if (){<CR>} else {<CR>}<Esc>kkf(a

inoremap for<CR> for ()<CR>{<CR>}<Esc>kkf(a
inoremap fori<CR> {<CR>unsigned int i;<CR>for (i=0;i<;i++)<CR>{<CR>}<CR>}<Esc>kkkf<a

inoremap uns<CR> unsigned 
inoremap #<CR> #include ""<Esc>i
inoremap pu<CR> puts("\n");<Esc>F\ha
inoremap pc<CR> putchar('');<Esc>F'ha
inoremap pr<CR> printf("\n");<Esc>F\ha
inoremap bit<CR> BIT()<Esc>i
inoremap st<CR> static
inoremap {<CR> {<CR><CR>}<Esc>k

if g:islinux
command! Source :source ~/.vimrc
command! Vimrc :edit ~/.vimrc
endif

if g:iswindows
command! Source :source e:\Studio\my_vim\_vimrc
command! Vimrc :edit e:\Studio\my_vim\_vimrc
endif


"vimdiff setting


" map <silent> <leader>1 :diffget 1<CR> :diffupdate<CR>
" map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
" map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
" map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"windows adjust
nmap + <c-w>+
nmap - <c-w>-
nmap < <c-w><
nmap > <c-w>>
"

nmap <silent> <F4> :Grep<CR>

nmap <F7> :make<CR>
nmap <F8> :make clean<CR>

nmap <F9> :make -f MakeALL.mk -j && make -f MakeALL.mk apps<CR>
nmap <F10> :make -f MakeALL.mk clean && make -f MakeALL.mk clean-apps<CR>

nmap <F11> :make -f MakeALL.mk 
nmap <F12> :make -f MakeALL.mk clean 

nmap <silent> <F5> :cp<CR>
nmap <silent> <F6> :cn<CR>

nmap ;f 	/\<\><Left><Left>

"save and load 
" let g:AutoSessionFile="project.vim"
" let g:OrigPWD=getcwd()
" if (filereadable(g:AutoSessionFile))
    " if argc() == 0
        " au VimEnter * call EnterHandler()
        " au VimLeave * call LeaveHandler()
    " endif
" endif

" function! EnterHandler()
    " exec "source ".g:AutoSessionFile
" endfunction

" function! LeaveHandler()
    " exec "mks! ".g:OrigPWD."/".g:AutoSessionFile
" endfunction
"

" support tmux
if exists('$TMUX')
    set term=screen-256color
endif

" if exists('$TMUX')
    " let &t_SI = "\<Esc>Ptmux;\<Esc>]50,CursorShape=1\x7\<Esc>\\"
    " let &t_EI = "\<Esc>Ptmux;\<Esc>]50,CursorShape=0\x7\<Esc>\\"
" else
    " let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    " let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif

set nowrapscan
nnoremap <Space> :
nnoremap <C-p> "+p
nnoremap <C-y> "+y

" paste system clipboard 
inoremap <S-Insert> <ESC>"+p']a

" paste system buffer
" set clipboard=unnamed
" paste system clipboard 
" set clipboard=unnamedplus

set pastetoggle=<F3>

" yank to system buffer
" set mouse=a
" yank to system clipboard
set mouse=v


fun! DeleteAllBuffersInWindow()
    let s:curWinNr = winnr()
    if winbufnr(s:curWinNr) == 1
        ret
    endif
    let s:curBufNr = bufnr("%")
    exe "bn"
    let s:nextBufNr = bufnr("%")
    while s:nextBufNr != s:curBufNr
        exe "bn"
        exe "bdel ".s:nextBufNr
        let s:nextBufNr = bufnr("%")
    endwhile
endfun
map <silent> <leader>bda     :call DeleteAllBuffersInWindow()<CR>

function! AddTitle()
    call append(0, "/*********************************************************************************************")
    call append(1, "    *   Filename        : ".expand("%:t"))
    call append(2, "")
    call append(3, "    *   Description     : ")
    call append(4, "")
    call append(5, "    *   Author          : Bingquan")
    call append(6, "")
    call append(7, "    *   Email           : bingquan_cai@zh-jieli.com")
    call append(8, "")
    call append(9, "    *   Last modifiled  : ".strftime("%Y-%m-%d %H:%M"))
    call append(10, "")
    call append(11, "    *   Copyright:(c)JIELI  2011-2016  @ , All Rights Reserved.")
    call append(12, "*********************************************************************************************/")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

function! UpdateTitle()
    normal m'
    execute '/# *Filename:/s@:.*$@\=":\t\t".expand("%:t")@'
    execute "noh"
    normal mk
    execute '/# *Last modifiled:/s@:.*$@\=strftime(":\t"%Y-%m-%d %H:%M")@'
    normal ''
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function! TitleDet()
    let n=1
    while n < 12
        let line = getline(n)
            if line =~ '^\#\s*\S*Last\smodifiled:\S*.*$'
            call UpdateTitle()
            return
        endif 
        let n = n + 1
    endwhile
   call AddTitle()
endfunction

" noremap \hd : call AddTitle()<CR>
noremap \hd : call TitleDet()<CR>


